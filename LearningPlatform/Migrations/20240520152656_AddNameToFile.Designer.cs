// <auto-generated />
using System;
using LearningPlatform;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LearningPlatform.Migrations
{
    [DbContext(typeof(LearningDbContext))]
    [Migration("20240520152656_AddNameToFile")]
    partial class AddNameToFile
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ClassEntityGroupEntity", b =>
                {
                    b.Property<int>("ClassesId")
                        .HasColumnType("integer");

                    b.Property<int>("GroupsId")
                        .HasColumnType("integer");

                    b.HasKey("ClassesId", "GroupsId");

                    b.HasIndex("GroupsId");

                    b.ToTable("ClassEntityGroupEntity");
                });

            modelBuilder.Entity("CourseEntityGroupEntity", b =>
                {
                    b.Property<int>("CoursesId")
                        .HasColumnType("integer");

                    b.Property<int>("GroupsId")
                        .HasColumnType("integer");

                    b.HasKey("CoursesId", "GroupsId");

                    b.HasIndex("GroupsId");

                    b.ToTable("CourseEntityGroupEntity");
                });

            modelBuilder.Entity("CourseEntityTeacherEntity", b =>
                {
                    b.Property<int>("CoursesId")
                        .HasColumnType("integer");

                    b.Property<Guid>("TeachersId")
                        .HasColumnType("uuid");

                    b.HasKey("CoursesId", "TeachersId");

                    b.HasIndex("TeachersId");

                    b.ToTable("CourseEntityTeacherEntity");
                });

            modelBuilder.Entity("GroupEntityTeacherEntity", b =>
                {
                    b.Property<int>("GroupsId")
                        .HasColumnType("integer");

                    b.Property<Guid>("TeachersId")
                        .HasColumnType("uuid");

                    b.HasKey("GroupsId", "TeachersId");

                    b.HasIndex("TeachersId");

                    b.ToTable("GroupEntityTeacherEntity");
                });

            modelBuilder.Entity("JournalEntityUserEntity", b =>
                {
                    b.Property<int>("JournalsId")
                        .HasColumnType("integer");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uuid");

                    b.HasKey("JournalsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("JournalEntityUserEntity");
                });

            modelBuilder.Entity("LearningPlatform.Models.AssessmentTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AssessmentTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Лекція"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Практичне заняття"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Лабораторне заняття"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Модульна контрольна робота"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Розрахунково-графічна робота"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Домашня контрольна робота"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Залік"
                        });
                });

            modelBuilder.Entity("LearningPlatform.Models.ClassEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClassTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("integer");

                    b.Property<int>("LessonId")
                        .HasColumnType("integer");

                    b.Property<short>("LessonNumber")
                        .HasColumnType("smallint");

                    b.Property<int>("SheduleSampleId")
                        .HasColumnType("integer");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uuid");

                    b.Property<bool>("isFirstWeek")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ClassTypeId");

                    b.HasIndex("LessonId");

                    b.HasIndex("SheduleSampleId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("LearningPlatform.Models.ClassTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ClassTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Лек on-line"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Прак on-line"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Лаб on-line"
                        });
                });

            modelBuilder.Entity("LearningPlatform.Models.CommentEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("StudentTaskId")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("StudentTaskId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("LearningPlatform.Models.CourseEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("LearningPlatform.Models.DepartmentEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FacultyId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("LearningPlatform.Models.FacultyEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Faculties");
                });

            modelBuilder.Entity("LearningPlatform.Models.FilePathEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("StudentTaskId")
                        .HasColumnType("integer");

                    b.Property<int?>("TaskId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StudentTaskId");

                    b.HasIndex("TaskId");

                    b.ToTable("FilePaths");
                });

            modelBuilder.Entity("LearningPlatform.Models.GradeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AssessmentTypeId")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int>("JournalId")
                        .HasColumnType("integer");

                    b.Property<int>("Mark")
                        .HasColumnType("integer");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentTypeId");

                    b.HasIndex("JournalId");

                    b.HasIndex("TeacherId");

                    b.HasIndex("UserId");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("LearningPlatform.Models.GroupEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SpecialityId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("SpecialityId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("LearningPlatform.Models.JournalEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("AcademicYear")
                        .HasColumnType("date");

                    b.Property<bool>("FirstSemester")
                        .HasColumnType("boolean");

                    b.Property<int>("LessonId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.ToTable("Journals");
                });

            modelBuilder.Entity("LearningPlatform.Models.LessonEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("LearningPlatform.Models.SectionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("LearningPlatform.Models.SheduleSampleEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("LessonTime1")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LessonTime2")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LessonTime3")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LessonTime4")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LessonTime5")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LessonTime6")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SheduleSamples");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LessonTime1 = "8:30",
                            LessonTime2 = "10:25",
                            LessonTime3 = "12:20",
                            LessonTime4 = "14:15",
                            LessonTime5 = "16:10",
                            LessonTime6 = "18:30"
                        });
                });

            modelBuilder.Entity("LearningPlatform.Models.SpecialityEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Code")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Specialities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = 23,
                            Name = "Образотворче мистецтво, декоративне мистецтво, реставрація"
                        },
                        new
                        {
                            Id = 2,
                            Code = 35,
                            Name = "Філологія"
                        },
                        new
                        {
                            Id = 3,
                            Code = 51,
                            Name = "Економіка"
                        },
                        new
                        {
                            Id = 4,
                            Code = 53,
                            Name = "Психологія"
                        },
                        new
                        {
                            Id = 5,
                            Code = 54,
                            Name = "Соціологія"
                        },
                        new
                        {
                            Id = 6,
                            Code = 61,
                            Name = "Журналістика"
                        },
                        new
                        {
                            Id = 7,
                            Code = 72,
                            Name = "Фінанси, банківська справа та страхування"
                        },
                        new
                        {
                            Id = 8,
                            Code = 73,
                            Name = "Менеджмент"
                        },
                        new
                        {
                            Id = 9,
                            Code = 75,
                            Name = "Маркетинг"
                        },
                        new
                        {
                            Id = 10,
                            Code = 81,
                            Name = "Право"
                        },
                        new
                        {
                            Id = 11,
                            Code = 101,
                            Name = "Екологія"
                        },
                        new
                        {
                            Id = 12,
                            Code = 104,
                            Name = "Фізика та астрономія"
                        },
                        new
                        {
                            Id = 13,
                            Code = 105,
                            Name = "Прикладна фізика та наноматеріали"
                        },
                        new
                        {
                            Id = 14,
                            Code = 111,
                            Name = "Математика"
                        },
                        new
                        {
                            Id = 15,
                            Code = 113,
                            Name = "Прикладна математика"
                        },
                        new
                        {
                            Id = 16,
                            Code = 121,
                            Name = "Інженерія програмного забезпечення"
                        },
                        new
                        {
                            Id = 17,
                            Code = 122,
                            Name = "Комп’ютерні науки та інформаційні технології"
                        },
                        new
                        {
                            Id = 18,
                            Code = 123,
                            Name = "Комп’ютерна інженерія"
                        },
                        new
                        {
                            Id = 19,
                            Code = 124,
                            Name = "Системний аналіз"
                        },
                        new
                        {
                            Id = 20,
                            Code = 125,
                            Name = "Кібербезпека"
                        },
                        new
                        {
                            Id = 21,
                            Code = 126,
                            Name = "Інформаційні системи та технології"
                        },
                        new
                        {
                            Id = 22,
                            Code = 131,
                            Name = "Прикладна механіка"
                        },
                        new
                        {
                            Id = 23,
                            Code = 132,
                            Name = "Матеріалознавство"
                        },
                        new
                        {
                            Id = 24,
                            Code = 133,
                            Name = "Галузеве машинобудування"
                        },
                        new
                        {
                            Id = 25,
                            Code = 134,
                            Name = "Авіаційна та ракетно-космічна техніка"
                        },
                        new
                        {
                            Id = 26,
                            Code = 136,
                            Name = "Металургія"
                        },
                        new
                        {
                            Id = 27,
                            Code = 141,
                            Name = "Електроенергетика, електротехніка та електромеханіка"
                        },
                        new
                        {
                            Id = 28,
                            Code = 142,
                            Name = "Енергетичне машинобудування"
                        },
                        new
                        {
                            Id = 29,
                            Code = 143,
                            Name = "Атомна енергетика"
                        },
                        new
                        {
                            Id = 30,
                            Code = 144,
                            Name = "Теплоенергетика"
                        },
                        new
                        {
                            Id = 31,
                            Code = 161,
                            Name = "Хімічні технології та інженерія"
                        },
                        new
                        {
                            Id = 32,
                            Code = 162,
                            Name = "Біотехнології та біоінженерія"
                        },
                        new
                        {
                            Id = 33,
                            Code = 163,
                            Name = "Біомедична інженерія"
                        },
                        new
                        {
                            Id = 34,
                            Code = 171,
                            Name = "Електроніка"
                        },
                        new
                        {
                            Id = 35,
                            Code = 172,
                            Name = "Телекомунікації та радіотехніка"
                        },
                        new
                        {
                            Id = 36,
                            Code = 173,
                            Name = "Авіоніка"
                        },
                        new
                        {
                            Id = 37,
                            Code = 174,
                            Name = "Автоматизація, комп’ютерно-інтегровані технології та робототехніка"
                        },
                        new
                        {
                            Id = 38,
                            Code = 175,
                            Name = "Інформаційно-вимірювальні технології"
                        },
                        new
                        {
                            Id = 39,
                            Code = 176,
                            Name = "Мікро- та наносистемна техніка"
                        },
                        new
                        {
                            Id = 40,
                            Code = 183,
                            Name = "Технології захисту навколишнього середовища"
                        },
                        new
                        {
                            Id = 41,
                            Code = 184,
                            Name = "Гірництво"
                        },
                        new
                        {
                            Id = 42,
                            Code = 186,
                            Name = "Видавництво та поліграфія"
                        },
                        new
                        {
                            Id = 43,
                            Code = 227,
                            Name = "Фізична реабілітація"
                        },
                        new
                        {
                            Id = 44,
                            Code = 231,
                            Name = "Соціальна робота"
                        },
                        new
                        {
                            Id = 45,
                            Code = 281,
                            Name = "Публічне управління та адміністрування"
                        });
                });

            modelBuilder.Entity("LearningPlatform.Models.StudentTaskEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TaskId")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.HasIndex("UserId");

                    b.ToTable("StudentTasks");
                });

            modelBuilder.Entity("LearningPlatform.Models.TaskEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SectionId")
                        .HasColumnType("integer");

                    b.Property<string>("TaskText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SectionId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("LearningPlatform.Models.TeacherEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("LearningPlatform.Models.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("GroupId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<Guid?>("TeacherId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("GroupId");

                    b.HasIndex("TeacherId")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4fd81173-61c8-4ba9-b0b2-2aa42381b140"),
                            Email = "admin@admin",
                            Name = "Admin",
                            PasswordHash = "$2a$11$cz12qsGtTEWjB75252WYrecjYfpX4VUyUNBTmt.TQJP.9oXJWu8we",
                            Role = 0
                        });
                });

            modelBuilder.Entity("LessonEntityTeacherEntity", b =>
                {
                    b.Property<int>("LessonsId")
                        .HasColumnType("integer");

                    b.Property<Guid>("TeachersId")
                        .HasColumnType("uuid");

                    b.HasKey("LessonsId", "TeachersId");

                    b.HasIndex("TeachersId");

                    b.ToTable("LessonEntityTeacherEntity");
                });

            modelBuilder.Entity("ClassEntityGroupEntity", b =>
                {
                    b.HasOne("LearningPlatform.Models.ClassEntity", null)
                        .WithMany()
                        .HasForeignKey("ClassesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LearningPlatform.Models.GroupEntity", null)
                        .WithMany()
                        .HasForeignKey("GroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CourseEntityGroupEntity", b =>
                {
                    b.HasOne("LearningPlatform.Models.CourseEntity", null)
                        .WithMany()
                        .HasForeignKey("CoursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LearningPlatform.Models.GroupEntity", null)
                        .WithMany()
                        .HasForeignKey("GroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CourseEntityTeacherEntity", b =>
                {
                    b.HasOne("LearningPlatform.Models.CourseEntity", null)
                        .WithMany()
                        .HasForeignKey("CoursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LearningPlatform.Models.TeacherEntity", null)
                        .WithMany()
                        .HasForeignKey("TeachersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GroupEntityTeacherEntity", b =>
                {
                    b.HasOne("LearningPlatform.Models.GroupEntity", null)
                        .WithMany()
                        .HasForeignKey("GroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LearningPlatform.Models.TeacherEntity", null)
                        .WithMany()
                        .HasForeignKey("TeachersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JournalEntityUserEntity", b =>
                {
                    b.HasOne("LearningPlatform.Models.JournalEntity", null)
                        .WithMany()
                        .HasForeignKey("JournalsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LearningPlatform.Models.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LearningPlatform.Models.ClassEntity", b =>
                {
                    b.HasOne("LearningPlatform.Models.ClassTypeEntity", "ClassType")
                        .WithMany("Classes")
                        .HasForeignKey("ClassTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LearningPlatform.Models.LessonEntity", "Lesson")
                        .WithMany("Classes")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LearningPlatform.Models.SheduleSampleEntity", "SheduleSample")
                        .WithMany("Classes")
                        .HasForeignKey("SheduleSampleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LearningPlatform.Models.TeacherEntity", "Teacher")
                        .WithMany("Classes")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassType");

                    b.Navigation("Lesson");

                    b.Navigation("SheduleSample");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("LearningPlatform.Models.CommentEntity", b =>
                {
                    b.HasOne("LearningPlatform.Models.StudentTaskEntity", "StudentTask")
                        .WithMany("Comments")
                        .HasForeignKey("StudentTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StudentTask");
                });

            modelBuilder.Entity("LearningPlatform.Models.CourseEntity", b =>
                {
                    b.HasOne("LearningPlatform.Models.UserEntity", "User")
                        .WithMany("Courses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LearningPlatform.Models.DepartmentEntity", b =>
                {
                    b.HasOne("LearningPlatform.Models.FacultyEntity", "Faculty")
                        .WithMany("Departments")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("LearningPlatform.Models.FilePathEntity", b =>
                {
                    b.HasOne("LearningPlatform.Models.StudentTaskEntity", "StudentTask")
                        .WithMany("FilePaths")
                        .HasForeignKey("StudentTaskId");

                    b.HasOne("LearningPlatform.Models.TaskEntity", "Task")
                        .WithMany("FilePaths")
                        .HasForeignKey("TaskId");

                    b.Navigation("StudentTask");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("LearningPlatform.Models.GradeEntity", b =>
                {
                    b.HasOne("LearningPlatform.Models.AssessmentTypeEntity", "AssessmentType")
                        .WithMany("Grades")
                        .HasForeignKey("AssessmentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LearningPlatform.Models.JournalEntity", "Journal")
                        .WithMany("Grades")
                        .HasForeignKey("JournalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LearningPlatform.Models.TeacherEntity", "Teacher")
                        .WithMany("Grades")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LearningPlatform.Models.UserEntity", "User")
                        .WithMany("Grades")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssessmentType");

                    b.Navigation("Journal");

                    b.Navigation("Teacher");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LearningPlatform.Models.GroupEntity", b =>
                {
                    b.HasOne("LearningPlatform.Models.DepartmentEntity", "Department")
                        .WithMany("Groups")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LearningPlatform.Models.SpecialityEntity", "Speciality")
                        .WithMany("Groups")
                        .HasForeignKey("SpecialityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Speciality");
                });

            modelBuilder.Entity("LearningPlatform.Models.JournalEntity", b =>
                {
                    b.HasOne("LearningPlatform.Models.LessonEntity", "Lesson")
                        .WithMany("Journals")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("LearningPlatform.Models.SectionEntity", b =>
                {
                    b.HasOne("LearningPlatform.Models.CourseEntity", "Course")
                        .WithMany("Sections")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("LearningPlatform.Models.StudentTaskEntity", b =>
                {
                    b.HasOne("LearningPlatform.Models.TaskEntity", "Task")
                        .WithMany("StudentTask")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LearningPlatform.Models.UserEntity", "User")
                        .WithMany("StudentTasks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LearningPlatform.Models.TaskEntity", b =>
                {
                    b.HasOne("LearningPlatform.Models.SectionEntity", "Section")
                        .WithMany("Tasks")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Section");
                });

            modelBuilder.Entity("LearningPlatform.Models.UserEntity", b =>
                {
                    b.HasOne("LearningPlatform.Models.DepartmentEntity", "Department")
                        .WithMany("Users")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("LearningPlatform.Models.GroupEntity", "Group")
                        .WithMany("Users")
                        .HasForeignKey("GroupId");

                    b.HasOne("LearningPlatform.Models.TeacherEntity", "Teacher")
                        .WithOne("User")
                        .HasForeignKey("LearningPlatform.Models.UserEntity", "TeacherId");

                    b.Navigation("Department");

                    b.Navigation("Group");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("LessonEntityTeacherEntity", b =>
                {
                    b.HasOne("LearningPlatform.Models.LessonEntity", null)
                        .WithMany()
                        .HasForeignKey("LessonsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LearningPlatform.Models.TeacherEntity", null)
                        .WithMany()
                        .HasForeignKey("TeachersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LearningPlatform.Models.AssessmentTypeEntity", b =>
                {
                    b.Navigation("Grades");
                });

            modelBuilder.Entity("LearningPlatform.Models.ClassTypeEntity", b =>
                {
                    b.Navigation("Classes");
                });

            modelBuilder.Entity("LearningPlatform.Models.CourseEntity", b =>
                {
                    b.Navigation("Sections");
                });

            modelBuilder.Entity("LearningPlatform.Models.DepartmentEntity", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("LearningPlatform.Models.FacultyEntity", b =>
                {
                    b.Navigation("Departments");
                });

            modelBuilder.Entity("LearningPlatform.Models.GroupEntity", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("LearningPlatform.Models.JournalEntity", b =>
                {
                    b.Navigation("Grades");
                });

            modelBuilder.Entity("LearningPlatform.Models.LessonEntity", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("Journals");
                });

            modelBuilder.Entity("LearningPlatform.Models.SectionEntity", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("LearningPlatform.Models.SheduleSampleEntity", b =>
                {
                    b.Navigation("Classes");
                });

            modelBuilder.Entity("LearningPlatform.Models.SpecialityEntity", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("LearningPlatform.Models.StudentTaskEntity", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("FilePaths");
                });

            modelBuilder.Entity("LearningPlatform.Models.TaskEntity", b =>
                {
                    b.Navigation("FilePaths");

                    b.Navigation("StudentTask");
                });

            modelBuilder.Entity("LearningPlatform.Models.TeacherEntity", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("Grades");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LearningPlatform.Models.UserEntity", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("Grades");

                    b.Navigation("StudentTasks");
                });
#pragma warning restore 612, 618
        }
    }
}
